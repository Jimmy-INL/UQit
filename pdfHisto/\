#######################################################
#      Fit PDF to data
#######################################################
import numpy as np
import statsmodels.api as sm
import matplotlib
import matplotlib.pyplot as plt


#////////////////////////////////
def pdfFit_uniVar(f,doPlot):
    """
        Fit a PDF to data f and plot both histogram and continuous PDF. 
        f: 1d(=uniVar) numpy array of size n 
    """
    if f.ndim>1:
       print('Note: input f to pdfFit_uniVar(f) must be a 1D numpy array. We reshape f!')
       nTot=1
       for i in range(f.ndim):
           nTot*=f.shape[i]           
       f=np.reshape(f,nTot)     
    #fit kde
    kde = sm.nonparametric.KDEUnivariate(f)
    kde.fit()
    #plot 
    if doPlot:
       plt.figure(figsize=(10,4));
       ax=plt.gca();
       plt.plot(kde.support,kde.density,'-r',lw=2)
       plt.hist(f,bins='auto',density=True,color='steelblue',alpha=0.4,edgecolor='b')
       plt.show()
    return kde

#///////////////////////////////
def pdfPredict_uniVar(f,fTest,doPlot):
    """
       Evaluate continuous PDF fitted to f at fTest. 
    """
    #First fit the PDF to f
    kde=pdfFit_uniVar(f,doPlot)
    
  
##########################
#/////////////////////////
from scipy import stats
from statsmodels.distributions.mixture_rvs import mixture_rvs
def pdf_uniVar_test():
    """
        For a set of randomly generated data, plot histogram and fitter PDF. 
    """
    def bimodal_samples(n):
        """
           Samples from a bimodal distribution
           The script in this function is taken from: https://www.statsmodels.org/stable/examples/notebooks/generated/kernel_density.html
        """
        # Location, scale and weight for the two distributions
        dist1_loc, dist1_scale, weight1 = -1 , .4, .3
        dist2_loc, dist2_scale, weight2 = 1 , .5, .7
        # Sample from a mixture of distributions
        f = mixture_rvs(prob=[weight1, weight2], size=n,
                               dist=[stats.norm, stats.norm],
                               kwargs = (dict(loc=dist1_loc, scale=dist1_scale),
                                         dict(loc=dist2_loc, scale=dist2_scale)))
        return f

    y=bimodal_samples(1000) 
    kde_y=pdfFit_uniVar(y,doPlot=True)
    


#//////////////////////////
#        if (I==7 or I==18):
#           T=np.histogram(fTest,bins=11)
#           fTest_hist=np.reshape(fTest,(nq_test[0]*nq_test[1]))
#
#           kde = sm.nonparametric.KDEUnivariate(fTest_hist)
#           kde.fit()
#           print(kde.evaluate(5.0),kde.evaluate(6.8),kde.evaluate(7.3),kde.evaluate(8.6))
#           plt.plot(kde.support,kde.density)
#           plt.hist(fTest_hist,bins='auto',density=True)
#           plt.show()
#
